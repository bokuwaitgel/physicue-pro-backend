// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// local variables course Type
// course Type
enum CourseType {
  Yoga
  GYM
  Stretch
  Pilates
  CrossFit
}



model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String?
  lastName           String?
  email              String   @unique
  profileImage       String   @default("")
  address            String   @default("")
  mobile             String   @default("")

  facebookAcc        String   @default("")
  instagramAcc       String   @default("")

  // userId         String   @unique
  firebaseToken      String   @default("")
  fcmToken           String   @default("")
  firebaseId         String   @default("")

  pushToken          String   @default("")
  salt               String   @default("")
  password           String   @default("")
  isTermAccepted     Boolean  @default(false)
  refreshToken       String?
  refreshTokenExpiry DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  CourseEnrollment CourseEnrollment[]
  bodyHistories    BodyHistory[]
  sleepHistories   SleepHistory[]
  WaterHistory     WaterHistory[]
  CaloriesHistory  CaloriesHistory[]
  GroupMembers     GroupMembers[]
  EventComment     EventComment[]

  Story Story[]

  EventLike EventLike[]
}

//   Personal         Personal?
//   Teacher          Teacher[]
//   CourseEnrollment CourseEnrollment[]
// }

model Teacher {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId

  description String   @default("")

  rating      Float    @default(0)
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  groupLimit  Int      @default(3)


  Courses   Courses[]
  Exercises Exercises[]
  Group     Group[]
  CourseEnrollment CourseEnrollment[]
}

model BodyHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  weight        Float?
  height        Float?
  bodyType      String?
  age           Int?
  goal          String? 
  gender        String?
  bodyIssue     String?
  birthDate     DateTime?
  workoutRepeat String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User    @relation(fields: [userId], references: [id])
  userId        String  @db.ObjectId
}

model SleepHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sleepTime  DateTime
  wakeTime   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId
}

model WaterHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  waterIntake Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model CaloriesHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  caloriesIntake Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Meal {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  mealType String
  mealTime DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mealRecipes      MealRecipe[]
}

model Recipe {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  recipe_name        String
  recipe_description String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  mealRecipes MealRecipe[]
}

model MealRecipe {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  meal     Meal   @relation(fields: [mealId], references: [id])
  mealId   String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String @db.ObjectId

  @@index([mealId])
  @@index([recipeId])
}


model GroupMembers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  userId    String   @db.ObjectId
  Role      String   @default("member")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Float    @default(0)

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model Group {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String  @default("")
  bannerImage   String  @default("")
  // admin         String  @db.ObjectId
  requirements  String  @default("")

  status        String  @default("active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupActivities GroupActivities[]

  Story        Story[]
  GroupMembers GroupMembers[]
  GroupCourses GroupCourses[]
  Event        Event[]

  adminId      String  @db.ObjectId
  admin        Teacher @relation(fields: [adminId], references: [id])
}

model GroupActivities {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  activity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id])

  @@index([groupId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  GroupId   String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Group Group @relation(fields: [GroupId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String   @default("")
  startTime   DateTime
  endTime     DateTime 
  location    String   @default("")

  imageURL    String   @default("")
  status      String   @default("active")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.ObjectId

  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @db.ObjectId

  EventLike    EventLike[]
  EventComment EventComment[]

  @@index([groupId])
}

model EventLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model EventComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model GroupCourses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  courseId  String   @db.ObjectId
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group  Group   @relation(fields: [groupId], references: [id])
  course Courses @relation(fields: [courseId], references: [id])

  @@index([groupId])
  @@index([courseId])
}

model Courses {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String @default("")

  duration    Int
  type        CourseType[] @default([])

  bannerImage String  @default("")
  shortVideo  String  @default("")

  status      String  @default("active")

  teacherId   String @db.ObjectId

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  courseEnrollments CourseEnrollment[]
  courseExercises   CourseExercises[]

  CourseSchedule CourseSchedule[]
  GroupCourses   GroupCourses[]

  @@index([teacherId])
}
model CourseExercises {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  exerciseId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courses   Courses   @relation(fields: [courseId], references: [id])
  exercises Exercises @relation(fields: [exerciseId], references: [id])

  @@index([courseId])
  @@index([exerciseId])
}

model Exercises {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String @default("")
  purpose     String @default("")
  duration    Int    @default(0)
  day         Int

  level       String @default("beginner")
  type        String @default("cardio")

  image       String @default("")
  video       String @default("")
  status      String @default("active")

  teacherId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  courseExercises   CourseExercises[]
}

model CourseEnrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String   @db.ObjectId
  course    Courses  @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([teacherId])
  @@index([courseId])
}

model CourseSchedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Courses @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

model PromoBan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // userId      String   @db.ObjectId
  title       String
  description String
  imageUlr    String

  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  tag         String   @default("free")
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model SubscriptionHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptionPlanId String @db.ObjectId
  SubscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
}


model SubscriptionPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  planName    String   @default("free")
  cost        String   @default("0")
  duration    Int      @default(0)
  status      String   @default("active")
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  SubscriptionHistory SubscriptionHistory[]
}

