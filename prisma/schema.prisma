// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum CourseType {
  Yoga
  GYM
  Stretch
  Pilates
  CrossFit
}

enum GroupType {
  Personal
  Yoga
  GYM
  Stretch
  Pilates
  CrossFit
}

enum PaymentStatus {
  SUCCESS
  PENDING
}

enum ChallengeType {
  Cardio
  Strength
  Flexibility
  Endurance
  Balance
}

enum ChallengeTier {
  Beginner
  Intermediate
  Advanced
  Expert
  Master
}

// ============================================================================
// AUTHENTICATION & ADMIN
// ============================================================================

model AdminUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  password  String
  salt      String   @default("")
  role      String   @default("super_admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String?
  lastName           String?
  email              String    @unique
  profileImage       String    @default("")
  address            String    @default("")
  mobile             String    @default("")
  facebookAcc        String    @default("")
  instagramAcc       String    @default("")
  firebaseToken      String    @default("")
  fcmToken           String    @default("")
  firebaseId         String    @default("")
  pushToken          String    @default("")
  salt               String    @default("")
  password           String    @default("")
  isTermAccepted     Boolean   @default(false)
  refreshToken       String?
  refreshTokenExpiry DateTime  @default(now())
  subscriptionId     String?   @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  subscription        Subscription?         @relation(fields: [subscriptionId], references: [id])
  CourseEnrollment    CourseEnrollment[]
  bodyHistories       BodyHistory[]
  sleepHistories      SleepHistory[]
  WaterHistory        WaterHistory[]
  CaloriesHistory     CaloriesHistory[]
  GroupMembers        GroupMembers[]
  EventComment        EventComment[]
  Story               Story[]
  EventLike           EventLike[]
  UserCalories        UserCalories[]
  Notification        Notification[]
  ProductOrder        ProductOrder[]
  PurchaseHistory     PurchaseHistory[]
  Payment             Payment[]
  PostLike            PostLike[]
  PostComment         PostComment[]
  Booking             Booking[]
  ChallengeEnrollment ChallengeEnrollment[]
  ChallengePoint      ChallengePoint[]


  UserStreakCounter UserStreakCounter[]
}

model UserStreakCounter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  streak    Int      @default(0)
  lastDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model UserCalories {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  calories  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Teacher {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  userId           String             @db.ObjectId
  description      String             @default("")
  aboutMe          String             @default("")
  experience       String             @default("")
  teacherImage     String             @default("")
  name             String             @default("")
  phone            String             @default("")
  rating           Float              @default(0)
  status           String             @default("active")
  groupLimit       Int                @default(3)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  Courses          Courses[]
  Exercises        Exercises[]
  Group            Group[]
  CourseEnrollment CourseEnrollment[]
  Post             Post[]
}

// ============================================================================
// HEALTH TRACKING
// ============================================================================

model BodyHistory {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  weight        Float?
  height        Float?
  bodyType      String?
  age           Int?
  goal          String?
  gender        String?
  bodyIssue     String?
  birthDate     DateTime?
  workoutRepeat String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model SleepHistory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?   @db.ObjectId
  sleepTime DateTime
  wakeTime  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  User User? @relation(fields: [userId], references: [id])
}

model WaterHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId
  waterIntake Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])
}

model CaloriesHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?  @db.ObjectId
  name           String
  caloriesIntake Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])
}

// ============================================================================
// MEALS & RECIPES
// ============================================================================


model UserMealTrackerDaily {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  date      DateTime
  kcal      Float    @default(0)
  protein   Float    @default(0)
  carbs     Float    @default(0)
  fats      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Meal {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  mealType String
  mealTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mealRecipes MealRecipe[]
}

model Recipe {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  recipe_name        String
  recipe_description String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  mealRecipes MealRecipe[]
}

model MealRecipe {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  mealId   String @db.ObjectId
  recipeId String @db.ObjectId

  meal   Meal   @relation(fields: [mealId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@index([mealId])
  @@index([recipeId])
}

// ============================================================================
// GROUPS & SOCIAL
// ============================================================================

model Group {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  adminId      String      @db.ObjectId
  name         String
  description  String      @default("")
  bannerImage  String      @default("")
  requirements String      @default("")
  status       String      @default("active")
  type         GroupType[] @default([])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  admin           Teacher           @relation(fields: [adminId], references: [id])
  groupActivities GroupActivities[]
  Story           Story[]
  GroupMembers    GroupMembers[]
  GroupCourses    GroupCourses[]
  Event           Event[]
  Post            Post[]
}

model GroupMembers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  userId    String   @db.ObjectId
  Role      String   @default("member")
  status    String   @default("active")
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model GroupActivities {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  activity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id])

  @@index([groupId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  GroupId   String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Group Group @relation(fields: [GroupId], references: [id])
  User  User  @relation(fields: [userId], references: [id])
}

// ============================================================================
// EVENTS
// ============================================================================

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String   @db.ObjectId
  title       String
  description String   @default("")
  startTime   DateTime
  endTime     DateTime
  location    String   @default("")
  imageURL    String   @default("")
  status      String   @default("active")
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group        Group          @relation(fields: [groupId], references: [id])
  EventLike    EventLike[]
  EventComment EventComment[]

  @@index([groupId])
}

model EventLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model EventComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

// ============================================================================
// POSTS
// ============================================================================

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String   @db.ObjectId
  authorId    String   @db.ObjectId
  title       String
  description String   @default("")
  type        String   @default("text") // text, image, video
  contentUrl  String   @default("")
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group       Group         @relation(fields: [groupId], references: [id])
  author      Teacher       @relation(fields: [authorId], references: [id])
  PostLike    PostLike[]
  PostComment PostComment[]

  @@index([groupId])
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

// ============================================================================
// COURSES & EXERCISES
// ============================================================================

model Courses {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  teacherId   String       @db.ObjectId
  title       String
  description String       @default("")
  duration    Int
  type        CourseType[] @default([])
  bannerImage String       @default("")
  shortVideo  String       @default("")
  price       Float        @default(0)
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  courseEnrollments CourseEnrollment[]
  courseExercises   CourseExercises[]
  CourseSchedule    CourseSchedule[]
  GroupCourses      GroupCourses[]
  Booking           Booking[]

  @@index([teacherId])
}

model GroupCourses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  courseId  String   @db.ObjectId
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group  Group   @relation(fields: [groupId], references: [id])
  course Courses @relation(fields: [courseId], references: [id])

  @@index([groupId])
  @@index([courseId])
}

model CourseExercises {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  exerciseId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courses   Courses   @relation(fields: [courseId], references: [id])
  exercises Exercises @relation(fields: [exerciseId], references: [id])

  @@index([courseId])
  @@index([exerciseId])
}

model Exercises {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId   String   @db.ObjectId
  name        String
  description String   @default("")
  purpose     String   @default("")
  duration    Int      @default(0)
  day         Int
  level       String   @default("beginner")
  type        String   @default("")
  image       String   @default("")
  videoType   String   @default("local") // youtube, vimeo, local
  video       String   @default("")
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher         Teacher           @relation(fields: [teacherId], references: [id])
  courseExercises CourseExercises[]
}

model CourseEnrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  teacherId String   @db.ObjectId
  courseId  String   @db.ObjectId
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  teacher Teacher   @relation(fields: [teacherId], references: [id])
  course  Courses   @relation(fields: [courseId], references: [id])
  Booking Booking[]

  @@index([userId])
  @@index([teacherId])
  @@index([courseId])
}

model Booking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  courseId   String   @db.ObjectId
  enrolledId String   @db.ObjectId
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id])
  course   Courses          @relation(fields: [courseId], references: [id])
  enrolled CourseEnrollment @relation(fields: [enrolledId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model CourseSchedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Courses @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

// ============================================================================
// SUBSCRIPTIONS
// ============================================================================

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  startDate DateTime
  endDate   DateTime
  tag       String   @default("free")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model SubscriptionPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  planName    String   @default("free")
  imageUrl    String   @default("")
  description String   @default("")
  cost        String   @default("0")
  duration    Int      @default(0)
  status      String   @default("active")
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  SubscriptionHistory SubscriptionHistory[]
}

model SubscriptionHistory {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  subscriptionPlanId String   @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  SubscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
}

// ============================================================================
// PROMOTIONS & PRODUCTS
// ============================================================================

model PromoBan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUlr    String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String   @default("")
  price       Float    @default(0)
  imageUrl    String   @default("")
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProductOrder    ProductOrder[]
  PurchaseHistory PurchaseHistory[]
}

model ProductOrder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int      @default(1)
  totalPrice Float    @default(0)
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model PurchaseHistory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  productId    String   @db.ObjectId
  quantity     Int      @default(1)
  totalPrice   Float    @default(0)
  purchaseDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

// ============================================================================
// PAYMENTS
// ============================================================================

model Payment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  amount      Float         @default(0)
  invoiceId   String        @default("")
  courseId    String        @default("")
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model QPayToken {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId        String   @default("")
  accessToken      String
  refreshToken     String
  expiresIn        Int
  refreshExpiresIn Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

// ============================================================================
// CHALLENGES
// ============================================================================

model Challenge {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String          @default("")
  imageUrl    String          @default("")
  duration    Int             @default(0) // in days
  point       Int             @default(0)
  type        ChallengeType[] @default([])
  status      String          @default("active")
  goal        String          @default("")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  ChallengeInstruction ChallengeInstruction[]
  ChallengeEnrollment  ChallengeEnrollment[]
  ChallengePoint       ChallengePoint[]
}

model ChallengeInstruction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  challengeId String   @db.ObjectId
  instruction String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Challenge Challenge @relation(fields: [challengeId], references: [id])

  @@index([challengeId])
}

model ChallengePoint {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  challengeId  String   @db.ObjectId
  pointsEarned Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  User      User      @relation(fields: [userId], references: [id])
  Challenge Challenge @relation(fields: [challengeId], references: [id])

  @@index([userId])
  @@index([challengeId])
}

model ChallengeEnrollment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  challengeId String   @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  status      String   @default("active")
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User      User      @relation(fields: [userId], references: [id])
  Challenge Challenge @relation(fields: [challengeId], references: [id])

  @@index([userId])
  @@index([challengeId])
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  token     String   @default("")
  imageUrl  String   @default("")
  type      String   @default("info")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}